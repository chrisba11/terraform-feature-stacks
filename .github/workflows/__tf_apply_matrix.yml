name: __tf_apply_matrix.yml

on:
  workflow_call:
    inputs:
      stacks_to_ignore:
        description: Comma-separated list of Terraform stacks to ignore when creating matrix.
        required: false
        type: string

    outputs:
      MATRIX:
        description: A matrix object that includes all Terraform stacks with planned changes.
        value: ${{ jobs.create-matrix.outputs.MATRIX }}

env:
  ARTIFACT_NAME: ${{ inputs.feature_tag != '' && inputs.feature_tag || inputs.environment }}-${{ inputs.stack_name }}.tfplan
  # latest commit on branch triggering workflow (helps avoid using merge commit)
  COMMIT_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}


jobs:
  create-matrix:
    name: Create TF Apply Matrix
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*.tfplan'
          path: artifacts
          merge-multiple: true

      - name: Create Matrix
        id: create-matrix
        run: |

          # Check if the 'artifacts' directory exists
          if [ -d "artifacts" ]; then
            cd artifacts
            # Initialize the matrix string
            MATRIX="{\"include\":["
            FILES_FOUND=false

            INPUT_STACKS_TO_IGNORE=${{ inputs.stacks_to_ignore }}

            # Remove any spaces from input string
            STACKS_TO_IGNORE="${INPUT_STACKS_TO_IGNORE// /}"
            echo "STACKS_TO_IGNORE = $STACKS_TO_IGNORE"

            # Check if the input string is not empty
            if [[ -n "$STACKS_TO_IGNORE" ]]; then
              # Split the input string into an array using comma as delimiter
              IGNORED_STACKS_ARRAY=(${(s/,/)STACKS_TO_IGNORE})
            else
              # If the input string is empty, initialize an empty array
              IGNORED_STACKS_ARRAY=()
            fi

            echo "IGNORED_STACKS_ARRAY = ${IGNORED_STACKS_ARRAY[@]}"

            # Run through list of files ending with '.tfplan'.
            for FILE in *.tfplan; do
              echo "FILE = $FILE"
              # Check if the globbing found any files by checking if the file exists.
              if [ -f "$FILE" ]; then
                # Extract the stack name from the file name.
                STACK_NAME=$(basename "$FILE" .tfplan | sed 's/.*-\(.*\)$/\1/')
                echo "STACK_NAME = $STACK_NAME"

                # Assume the stack should not be ignored initially
                IGNORE_STACK=false

                # Check if the stack should not be ignored
                for IGNORED_STACK in "${IGNORED_STACKS_ARRAY[@]}"; do
                  echo "$STACK_NAME = $IGNORED_STACK ?"
                  if [ "$STACK_NAME" = "$IGNORED_STACK" ]; then
                    IGNORE_STACK=true
                    break
                  fi
                  echo "IGNORE_STACK = $IGNORE_STACK (in for loop)"
                done

                echo "IGNORE_STACK = $IGNORE_STACK (final)"

                # If the stack should not be ignored, add it to the matrix.
                if [ "$IGNORE_STACK" = "false" ]; then
                  FILES_FOUND=true
                  MATRIX="${MATRIX}{\"STACK_NAME\":\"${STACK_NAME}\"},"
                fi
              fi
            done

            # Check if any files were found and processed.
            if [ "$FILES_FOUND" = true ]; then
              # Remove the trailing comma from the last entry.
              MATRIX="${MATRIX%,}]}"
            else
              # Ensure MATRIX is assigned the special skip value if no files are found.
              echo "No files found that were not ignored."
              MATRIX="skip"
            fi
          else
            # If 'artifacts' directory doesn't exist, format MATRIX with special skip value.
            echo "No artifacts directory."
            MATRIX="skip"
          fi

          echo "MATRIX=$MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
