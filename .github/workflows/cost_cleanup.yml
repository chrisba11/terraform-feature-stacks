# This workflow is designed to be run as needed to remove costly resources

name: Terraform Cleanup - Cost Savings

run-name: Terraform Cleanup - Cost Savings (${{ inputs.environments }})

on:
  workflow_dispatch:
    inputs:
      environments:
        description: Comma-separated list of environments to run against.
        required: true
        type: string
        default: dev,test,prod

      resource_targets:
        description: Comma-separated list of resources to target for destruction (optional). If omitted, all resources in the selected stack will be destroyed.
        required: false
        type: string

      stack_names:
        description: Comma-separated list of of Terraform stack names to run against.
        required: true
        type: string
        default: vpc

  # schedule:
  #   - cron: '0 0 * * *'  # Daily at 5 PM PST

permissions:
  contents: read
  id-token: write

env:
  # Comma-separated list of resources to target for destruction
  VPC_TARGETS: aws_eip.nat,aws_nat_gateway.nat,aws_internet_gateway.default


jobs:
  env-vars:
    name: Set Env Vars as Outputs
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.set-outputs.outputs.matrix }}
      RESOURCE_TARGETS: ${{ steps.set-outputs.outputs.resource_targets }}
    steps:
      - name: Set Output Values
        id: set-outputs
        run: |

          # set resource targets value based on event triggering workflow
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # for manual runs, grab list from input
            RESOURCE_TARGETS="${INPUT_RESOURCE_TARGETS}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # for scheduled runs, use predefined lists
            RESOURCE_TARGETS="${VPC_TARGETS}"
          fi

          # Remove any spaces
          ENVS="${INPUT_ENVIRONMENTS// /}"
          RESOURCE_TARGETS="${RESOURCE_TARGETS// /}"
          STACKS="${INPUT_STACK_NAMES// /}"

          # Split environments and stack names into arrays
          IFS=',' read -ra ENV_ARRAY <<< "$ENVS"
          IFS=',' read -ra STACK_ARRAY <<< "$STACKS"

          MATRIX="{\"include\":["

          # Iterate through every combination of environment and stack name
          for ENV in "${ENV_ARRAY[@]}"; do
            for STACK in "${STACK_ARRAY[@]}"; do
              # Logic to match environment to account ID (adjust as needed)
              if [[ $ENV == "dev" ]]; then
                ACCOUNT_ID="${{ vars.DEV_ACCOUNT_ID }}"
              elif [[ $ENV == "test" ]]; then
                ACCOUNT_ID="${{ vars.TEST_ACCOUNT_ID }}"
              elif [[ $ENV == "prod" ]]; then
                ACCOUNT_ID="${{ vars.PROD_ACCOUNT_ID }}"
              fi
              # Construct JSON object for matrix
              MATRIX="${MATRIX}{\"ENVIRONMENT\":[\"${ENV}\",\"${ACCOUNT_ID}\"],\"STACK_NAME\":\"${STACK}\"},"
            done
          done
          MATRIX="${MATRIX%,}]}"

          echo "MATRIX = $MATRIX"

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "resource_targets=${RESOURCE_TARGETS}" >> $GITHUB_OUTPUT


  tf-destroy:
    name: Terraform Cleanup
    needs: 
      - env-vars
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.env-vars.outputs.MATRIX) }}
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_destroy.yml@v1
    with:
      aws_account_id: ${{ matrix.ENVIRONMENT[1] }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ matrix.ENVIRONMENT[0] }}
      resource_targets: ${{ needs.env-vars.outputs.RESOURCE_TARGETS }}
      role_name: GithubActionsRole-Write
      terraform_version: =1.7.0
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ matrix.ENVIRONMENT[0] }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}.tfstate
      tfvars_path: ./environments/${{ matrix.ENVIRONMENT[0] }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}
