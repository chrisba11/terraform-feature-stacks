name: Deployment

run-name: Deploy - ${{ inputs.environment == '' && 'dev' || inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Which environment is being deployed?
        required: true
        default: test
        type: choice
        options:
          - dev
          - test
          - prod
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'
      - './docs/**'

permissions:
  contents: read
  id-token: write

env:
  DEFAULT_ENV: dev
  TF_VERSION: =1.7.0


jobs:
  env-vars:
    name: Set Env Vars as Outputs
    runs-on: ubuntu-latest
    outputs:
      AWS_ACCOUNT_ID: ${{ steps.set-outputs.outputs.aws_account_id }}
      ENVIRONMENT: ${{ steps.set-outputs.outputs.environment }}
      TF_VERSION: ${{ steps.set-outputs.outputs.tf_version }}
    steps:
      # this sets environment variable outputs consumed by downstream jobs
      # this is needed because the 'env' context is not available to reusable workflows
      - name: Set Output Values
        id: set-outputs
        run: |

          # set environment output
          if [ -n "${{ inputs.environment }}" ]; then
            # will use environment input value when workflow_dispatch trigger is used
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # this will default the environment for all other triggers
            echo "environment=${DEFAULT_ENV}" >> $GITHUB_OUTPUT
          fi

          # set AWS Account ID output based on environment
          if [ "${{ inputs.environment }}" == "test" ]; then
            echo "aws_account_id=${{ vars.TEST_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" == "prod" ]; then
            echo "aws_account_id=${{ vars.PROD_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          else
            echo "aws_account_id=${{ vars.DEV_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          fi

          # sets terraform version output
          echo "tf_version=${TF_VERSION}" >> $GITHUB_OUTPUT


  tf-plan-oidc:
    name: Terraform Plan - OIDC
    needs:
      - env-vars
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        stack_name:
          - oidc
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_tf_plan.yml@main
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-ReadOnly
      stack_name: ${{ matrix.stack_name }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.stack_name }}
      tfvars_path: ./environments/${{ needs.env-vars.outputs.ENVIRONMENT }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.stack_name }}


  tf-apply-oidc:
    name: Terraform Apply - OIDC
    needs: 
      - env-vars
      - tf-plan-oidc
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        stack_name:
          - oidc
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_tf_apply.yml@main
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-Write
      stack_name: ${{ matrix.stack_name }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.stack_name }}
      working_directory: infra/tf/stacks/${{ matrix.stack_name }}


  tf-plan-vpc:
    name: Terraform Plan - VPC
    needs:
      - env-vars
      - tf-apply-oidc
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        stack_name:
          - vpc
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_tf_plan.yml@main
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-ReadOnly
      stack_name: ${{ matrix.stack_name }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.stack_name }}
      tfvars_path: ./environments/${{ needs.env-vars.outputs.ENVIRONMENT }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.stack_name }}


  tf-apply-vpc:
    name: Terraform Apply - VPC
    needs: 
      - env-vars
      - tf-plan-vpc
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        stack_name:
          - vpc
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_tf_apply.yml@main
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-Write
      stack_name: ${{ matrix.stack_name }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.stack_name }}
      working_directory: infra/tf/stacks/${{ matrix.stack_name }}


  build:
    name: Build Lambda Package
    needs:
      - env-vars
      - tf-apply-vpc
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the lambda name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        lambda_name:
          - ImageDownload
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_build_python_lambda.yml@main
    with:
      aws_region: ${{ vars.AWS_REGION }}
      lambda_name: ${{ matrix.lambda_name }}
      python_version: 3.11
      src_directory: src/lambdas/${{ matrix.lambda_name }}


  tf-plan-api:
    name: Terraform Plan - API
    needs:
      - env-vars
      - build
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        stack_name:
          - api
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_tf_plan.yml@main
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-ReadOnly
      stack_name: ${{ matrix.stack_name }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.stack_name }}
      tfvars_path: ./environments/${{ needs.env-vars.outputs.ENVIRONMENT }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.stack_name }}


  tf-apply-api:
    name: Terraform Apply - API
    needs: 
      - env-vars
      - tf-plan-api
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        stack_name:
          - api
    uses: chrisba11/terraform-feature-stacks/.github/workflows/rw_tf_apply.yml@main
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-Write
      stack_name: ${{ matrix.stack_name }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.stack_name }}
      working_directory: infra/tf/stacks/${{ matrix.stack_name }}
