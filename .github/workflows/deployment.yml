name: Deployment

run-name: Deploy - ${{ inputs.environment == '' && 'dev' || inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Which environment is being deployed?
        required: true
        default: test
        type: choice
        options:
          - dev
          - test
          - prod

  push:
    branches:
      - main

    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'
      - './docs/**'

permissions:
  contents: read
  id-token: write

env:
  DEFAULT_ENV: dev
  LAMBDA_PACKAGE_BUCKET: chrisba11-example-lambda-packages # excludes env suffix
  TF_VERSION: =1.7.0


jobs:
  env-vars:
    name: Set Env Vars as Outputs
    runs-on: ubuntu-latest
    outputs:
      AWS_ACCOUNT_ID: ${{ steps.set-outputs.outputs.aws_account_id }}
      ENVIRONMENT: ${{ steps.set-outputs.outputs.environment }}
      TF_VERSION: ${{ steps.set-outputs.outputs.tf_version }}
    steps:
      # this sets environment variable outputs consumed by downstream jobs
      # this is needed because the 'env' context is not available to reusable workflows
      - name: Set Output Values
        id: set-outputs
        run: |

          # set environment output
          if [ -n "${{ inputs.environment }}" ]; then
            # will use environment input value when workflow_dispatch trigger is used
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # this will default the environment for all other triggers
            echo "environment=${DEFAULT_ENV}" >> $GITHUB_OUTPUT
          fi

          # set AWS Account ID output based on environment
          if [ "${{ inputs.environment }}" == "test" ]; then
            echo "aws_account_id=${{ vars.TEST_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" == "prod" ]; then
            echo "aws_account_id=${{ vars.PROD_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          else
            echo "aws_account_id=${{ vars.DEV_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
          fi

          # sets terraform version output
          echo "tf_version=${TF_VERSION}" >> $GITHUB_OUTPUT


  tf-plan-oidc:
    name: Terraform Plan - OIDC
    needs:
      - env-vars
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        STACK_NAME:
          - oidc
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_plan.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-ReadOnly
      stack_name: ${{ matrix.STACK_NAME }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}
      tfvars_path: ./environments/${{ needs.env-vars.outputs.ENVIRONMENT }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}


  tf-apply-oidc:
    name: Terraform Apply - OIDC
    needs: 
      - env-vars
      - tf-plan-oidc
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        STACK_NAME:
          - oidc
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_apply.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-Write
      stack_name: ${{ matrix.STACK_NAME }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}


  tf-plan-storage:
    name: Terraform Plan - Storage
    needs:
      - env-vars
      - tf-apply-oidc
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        STACK_NAME:
          - storage
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_plan.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-ReadOnly
      stack_name: ${{ matrix.STACK_NAME }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}.tfstate
      tfvars_path: ./environments/${{ needs.env-vars.outputs.ENVIRONMENT }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}


  tf-apply-storage:
    name: Terraform Apply - Storage
    needs: 
      - env-vars
      - tf-plan-storage
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        STACK_NAME:
          - storage
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_apply.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-Write
      stack_name: ${{ matrix.STACK_NAME }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}.tfstate
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}


  build:
    name: Build Lambda Package
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the lambda name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        LAMBDA_NAME:
          - ImageDownload
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__build_python_lambda.yml@v1
    with:
      aws_region: ${{ vars.AWS_REGION }}
      lambda_name: ${{ matrix.LAMBDA_NAME }}
      python_version: 3.11
      src_directory: src/lambdas/${{ matrix.LAMBDA_NAME }}


  deploy:
    name: Deploy Lambda Package
    needs:
      - env-vars
      - build
    strategy:
      fail-fast: false
      matrix:
        LAMBDA_NAME:
          - ImageDownload
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__upload_s3_object.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      bucket_name: edvise-lambda-packages-${{ needs.env-vars.outputs.ENVIRONMENT }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      object_key: ${{ github.event.repository.name }}/${{ matrix.LAMBDA_NAME }}.zip
      object_name: ${{ matrix.LAMBDA_NAME }}.zip
      role_name: GithubActionsRole-Write


  tf-plan-api:
    name: Terraform Plan - API
    needs:
      - env-vars
      - deploy
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        STACK_NAME:
          - api
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_plan.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-ReadOnly
      stack_name: ${{ matrix.STACK_NAME }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}.tfstate
      tfvars_path: ./environments/${{ needs.env-vars.outputs.ENVIRONMENT }}.tfvars
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}


  tf-apply-api:
    name: Terraform Apply - API
    needs: 
      - env-vars
      - tf-plan-api
    # using the matrix strategy here because the 'env' context is not available
    # this gives us the ability to define the stack name once and use many times in the inputs
    strategy:
      fail-fast: false
      matrix:
        STACK_NAME:
          - api
    uses: chrisba11/terraform-feature-stacks/.github/workflows/__tf_apply.yml@v1
    with:
      aws_account_id: ${{ needs.env-vars.outputs.AWS_ACCOUNT_ID }}
      aws_region: ${{ vars.AWS_REGION }}
      environment: ${{ needs.env-vars.outputs.ENVIRONMENT }}
      role_name: GithubActionsRole-Write
      stack_name: ${{ matrix.STACK_NAME }}
      terraform_version: ${{ needs.env-vars.outputs.TF_VERSION }}
      tf_backend_name: ${{ vars.TF_BACKEND_PREFIX }}-${{ needs.env-vars.outputs.ENVIRONMENT }}
      tf_backend_key: ${{ github.event.repository.name }}/${{ matrix.STACK_NAME }}.tfstate
      working_directory: infra/tf/stacks/${{ matrix.STACK_NAME }}


  update:
    name: Update Lambda
    runs-on: ubuntu-latest
    needs: 
      - env-vars
      - deploy
      - tf-apply-api
    strategy:
      fail-fast: false
      matrix:
        LAMBDA_NAME:
          - ImageDownload
    steps:
      - name: Update Lambda Function Code
        run: |

          # triggers lambda function to use new updated zip archive
          aws lambda update-function-code \
            --function-name ${{ matrix.LAMBDA_NAME }} \
            --s3-bucket ${{ env.LAMBDA_PACKAGE_BUCKET }}-${{ needs.env-vars.outputs.ENVIRONMENT }} \
            --s3-key ${{ matrix.LAMBDA_NAME }}.zip
